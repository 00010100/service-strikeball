const AccessControl = require('accesscontrol')
const ac = new AccessControl()

exports.roles = (() => {
  ac.grant('player')
    .readAny('playerProfile')

  ac.grant('manager')
    .extend('player')
    .readAny('playerProfile')
    .deleteAny('playerProfile')

  ac.grant('admin')
    .extend('manager')
    .readAny('managerProfile')
    .updateAny('playerProfile')
    .updateAny('managerProfile')

  return ac
})()

// роль админ (admin):
//    1) Заранее добавленный пользователь в БД
//    2) Подтверждает (approve) регистрацию менеджера (manager)
//    3) Может просматривать информацию о всех менеджерах
//    4) Может просматривать информацию по каждому менеджеру отдельно по id
//    5) Может просматривать информацию о всех участниках, которые добавились в команду
//    6) Может просматривать информацию о всех участниках по отдельным командам
//    7) Может просматривать информацию по каждому участнику отдельно по id
//    8) Может блокировать аккаунт менеджера (manager) c указанием причин
//    9) Может блокировать аккаунт участника (player) c указанием причин
//   10) Может активировать аккаунт менеджера (manager) c указанием причин
//   11) Может активировать аккаунт участника (player) c указанием причин
//   12) Может удалять любого участника из команды с указанием причин

// роль менеджер (manager):
//    1) Может регистрироваться на сервис
//    2) Может логиниться на сервис (при условии если admin подтвердил регистрацию пользователя)
//    3) Подтверждает (approve) добавления участника (player) в команду
//    4) Может просматривать информацию о всех участниках, которые добавились в команду
//    5) Может просматривать информацию о всех участниках по отдельным командам
//    6) Может просматривать информацию по каждому участнику отдельно по id
//    7) Может удалять любого участника из команды с указанием причин

// роль участник (player):
//    1) Может регистрироваться на сервис
//    2) Может логиниться на сервис
//    3) Может просматривать информацию о всех участниках, которые добавились в команду
//    4) Может просматривать информацию о всех участниках по отдельным командам
//    5) Может подать заявку на добавление в одну из команд, которую должен принять или отклонить менеджер
//    6) Может отменить заявку если её не подтвердил менеджер
//    7) Может подать заявку на выход из команды или переход в соседнюю команду, которую должен принять или отклонить менеджер
